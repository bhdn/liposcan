#!/usr/bin/env python
import sys
import os
import optparse

from lipolib.hdlist import HdlistParser
from lipolib.rpmver import vercmp

DESCRIPTION = """\
%prog lists packages that are obsolete in a given repository

("obsolete" means that there are newer versions in the same repository.)
"""
USAGE = "%prog [options] <media-dir> ..."
SYNTHESIS_PATH = "media_info/synthesis.hdlist.cz"

def get_packages(synpath):
    parser = HdlistParser(synpath)
    packages = {}
    while True:
        pkg = parser.next()
        if pkg is None:
            break
        packages.setdefault(pkg.name, []).append(pkg)
    return packages

def inspect_media(mediadir, synthesis=None):
    synpath = os.path.join(mediadir, synthesis)
    packages = get_packages(synpath)
    obsolete = []
    for name, related in packages.iteritems():
        if len(related) > 1:
            versions = [(pkg.fullversion, pkg) for pkg in related]
            versions.sort(cmp=vercmp, reverse=True, key=lambda x: x[0])
            obsolete.extend(pkg for fv, pkg in versions[1:])
    for pkg in obsolete:
        path = os.path.join(mediadir, pkg.fullname + ".rpm")
        yield path

def parse_options(args):
    parser = optparse.OptionParser(usage=USAGE, description=DESCRIPTION)
    parser.add_option("-s", "--synthesis", type="string",
        default=SYNTHESIS_PATH,
        help="path to the synthesis file for the media "\
             "(can be relative)")
    parser.add_option("-m", "--moveto", type="string", default=None,
        metavar="DIR",
        help="move obsolete package files to DIR")
    parser.add_option("-f", "--force", default=False, action="store_true",
        help="overwrite existing files (when using -m DIR)")
    if not args:
        parser.print_help()
    return parser.parse_args(args)

def main(args):
    opts, repodirs = parse_options(args)
    for repo in repodirs:
        for pkgpath in inspect_media(repo, synthesis=opts.synthesis):
            if not os.path.exists(pkgpath):
                sys.stderr.write("missing file: %s\n" % (pkgpath))
            else:
                print pkgpath
            if opts.moveto:
                name = os.path.basename(pkgpath)
                newpath = os.path.join(opts.moveto, name)
                if os.path.exists(newpath) and not opts.force:
                    sys.stderr.write("not moving, already exists: %s\n" %
                            (newpath))
                else:
                    os.rename(pkgpath, newpath)

if __name__ == "__main__":
    main(sys.argv[1:])

# vim:ts=4:sw=4:et
